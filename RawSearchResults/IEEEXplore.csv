"Document Title",Authors,"Author Affiliations","Publication Title",Date Added To Xplore,"Publication Year","Volume","Issue","Start Page","End Page","Abstract","ISSN",ISBNs,"DOI",Funding Information,PDF Link,"Author Keywords","IEEE Terms","INSPEC Controlled Terms","INSPEC Non-Controlled Terms","Mesh_Terms",Article Citation Count,"Reference Count","License",Online Date,Issue Date,"Meeting Date","Publisher",Document Identifier
"Modeling Framework API Evolution as a Multi-objective Optimization Problem","W. Wu","DGIGL, Ecole Polytech. de Montreal, Montreal, QC, Canada","2011 IEEE 19th International Conference on Program Comprehension","1 Aug 2011","2011","","","262","265","Today's software development depends greatly on frameworks and libraries. When their APIs evolve, developers must update their programs accordingly. Existing approaches facilitate the upgrading process by generating change -- rules based on various input data, such call dependency, text similarity, software metrics, etc. However, existing approaches do not provide 100% precision and recall because of the limited set of input data that they use to generate change -- rules. For example, an approach only considering text similarity usually discovers less change -- rules then that considering both text similarity and call dependency with similar precision. But adding more input data may increase the complexity of the change -- rule generating algorithms and make them unpractical. We propse MOFAE (Multi-Objective Framework API Evolution) by modeling framework API evolution as multi-objective optimization problem to take more input data into account while generating change -- rules and to control the algorithmic complexity.","1092-8138","978-0-7695-4398-7","10.1109/ICPC.2011.43","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5970177","framework evolution;API evolution;multi-object problem;search based software engineering","USA Councils;Software engineering;Conferences;IEEE Computer Society;Software;Optimization;Libraries","application program interfaces;computational complexity;optimisation;software metrics","framework API evolution modeling;multiobjective optimization problem;software development;text similarity;call dependency;software metrics;change rule generating algorithm complexity;multiobjective framework API evolution","","","32","","1 Aug 2011","","","IEEE","IEEE Conferences"
"API Evolution with RefactoringNG","Z. Tronícĕk","Dept. of Software Eng., FIT CTU in Prague, Prague, Czech Republic","2010 Second World Congress on Software Engineering","22 Feb 2011","2010","2","","293","297","When frameworks and libraries evolve, they often change interfaces. Upgrade to a new version of framework or library leads to changing code manually. We describe a new refactoring tool for the Java programming language that enables automatic migration to a new framework or library, provided that library authors delivered the refactoring rules.","","978-1-4244-9287-9","10.1109/WCSE.2010.107","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5718396","Java;refactoring;API evolution;NetBeans","Java;Libraries;Syntactics;Boats;Sun;Software engineering","application program interfaces;Java;software libraries;software maintenance","API evolution;RefactoringNG;Java programming language;library;Java refactoring tool","","","9","","22 Feb 2011","","","IEEE","IEEE Conferences"
"How Does Web Service API Evolution Affect Clients?","J. Li; Y. Xiong; X. Liu; L. Zhang","Key Lab. of High Confidence Software Technol., Peking Univ., Beijing, China; Key Lab. of High Confidence Software Technol., Peking Univ., Beijing, China; Key Lab. of High Confidence Software Technol., Peking Univ., Beijing, China; Key Lab. of High Confidence Software Technol., Peking Univ., Beijing, China","2013 IEEE 20th International Conference on Web Services","31 Oct 2013","2013","","","300","307","Like traditional local APIs, web service APIs (web APIs for short) evolve, bringing new and improved functionality as well as incompatibilities. Client programs have to be modified according to these changes in order to use the new APIs. Unlike client programs of a local API, which could continue to use the old API, clients of a web API often do not have the option not to upgrade, since the old version of the API may not be provided as a service anymore. Therefore, migrating clients of web APIs is a more critical task. Research has been done in the evolution of local APIs and different approaches have been proposed to support the migration of client applications. However, in practice, we seldom observe that web API providers release automated tools or services to assist the migration of client applications. In this paper, we report an empirical study on web API evolution to address this issue. We analyzed the evolution of five popular web APIs, in total 256 hanged API elements, and carefully compared our results with existing empirical study on API evolution. Our findings are threefold: 1) We summarize the API changes into 16 change patterns, which provide grounded supports for future research, 2) We identify 6 completely new challenges in migrating web API clients, which do not exist in the migration of local API clients, 3) We also identify several unique characteristics in web API evolution.","","978-0-7695-5025-1","10.1109/ICWS.2013.48","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6649592","Software Engineering;Software Maintenance;Web Service API Evolution","Google;Libraries;Calendars;Web services;Java;Upper bound;Twitter","application program interfaces;client-server systems;Web services","API elements;client application migration;client migrating;local API;client program;Web service API evolution","","28","14","","31 Oct 2013","","","IEEE","IEEE Conferences"
"Classification of Changes in API Evolution","R. Koçi; X. Franch; P. Jovanovic; A. Abelló","Polytechnic University of Catalonia, Spain; Polytechnic University of Catalonia, Spain; Polytechnic University of Catalonia, Spain; Polytechnic University of Catalonia, Spain","2019 IEEE 23rd International Enterprise Distributed Object Computing Conference (EDOC)","30 Dec 2019","2019","","","243","249","Applications typically communicate with each other, accessing and exposing data and features by using Application Programming Interfaces (APIs). Even though API consumers expect APIs to be steady and well established, APIs are prone to continuous changes, experiencing different evolutive phases through their lifecycle. These changes are of different types, caused by different needs and are affecting consumers in different ways. In this paper, we identify and classify the changes that often happen to APIs, and investigate how all these changes are reflected in the documentation, release notes, issue tracker and API usage logs. The analysis of each step of a change, from its implementation to the impact that it has on API consumers, will help us to have a bigger picture of API evolution. Thus, we review the current state of the art in API evolution and, as a result, we define a classification framework considering both the changes that may occur to APIs and the reasons behind them. In addition, we exemplify the framework using a software platform offering a Web API, called District Health Information System (DHIS2), used collaboratively by several departments of World Health Organization (WHO).","2325-6362","978-1-7281-2702-6","10.1109/EDOC.2019.00037","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8944981","API evolution;API changes classification;log mining;issue tracker","Documentation;Tools;Software;Libraries;Publishing;Focusing;Syntactics","application program interfaces;Internet;pattern classification;software maintenance","API evolution;application programming interfaces;API usage logs;Web API;classification framework","","","20","","30 Dec 2019","","","IEEE","IEEE Conferences"
"SemDiff: Analysis and recommendation support for API evolution","B. Dagenais; M. P. Robillard","School of Computer Science, McGill University, Montréal, QC, Canada; School of Computer Science, McGill University, Montréal, QC, Canada","2009 IEEE 31st International Conference on Software Engineering","10 Jun 2009","2009","","","599","602","As a framework evolves, changes in its application programming interface (API) can break client programs that extend the framework. Repairing a client program can be a challenging task because developers need to understand the context surrounding the API change. This paper describes SemDiff, a tool that recommends replacements for framework methods that were accessed by a client program and deleted during the evolution of the framework. SemDiff recommends replacements for non-trivial changes undiscovered by other change-detection techniques and also enables developers to look at the context of the changes that led to the deletion of a framework method.","1558-1225","978-1-4244-3453-4","10.1109/ICSE.2009.5070565","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5070565","","Application software;Fingerprint recognition;Computer science;Electronic mail;Genetic programming;Software prototyping;Prototypes;User interfaces;Writing;Java","application program interfaces","SemDiff;API evolution;application programming interface;change-detection technique","","17","11","","10 Jun 2009","","","IEEE","IEEE Conferences"
"How do developers react to API evolution? The Pharo ecosystem case","A. Hora; R. Robbes; N. Anquetil; A. Etien; S. Ducasse; M. Tulio Valente","ASERG Group, Department of Computer Science (DCC), Federal University of Minas Gerais, Brazil; PLEIAD Lab, Department of Computer Science (DCC), University of Chile, Santiago, Chile; RMod team, Inria Lille Nord Europe, University of Lille, CRIStAL, UMR 9189, Villeneuve d'Ascq, France; RMod team, Inria Lille Nord Europe, University of Lille, CRIStAL, UMR 9189, Villeneuve d'Ascq, France; RMod team, Inria Lille Nord Europe, University of Lille, CRIStAL, UMR 9189, Villeneuve d'Ascq, France; ASERG Group, Department of Computer Science (DCC), Federal University of Minas Gerais, Brazil","2015 IEEE International Conference on Software Maintenance and Evolution (ICSME)","23 Nov 2015","2015","","","251","260","Software engineering research now considers that no system is an island, but it is part of an ecosystem involving other systems, developers, users, hardware, ... When one system (e.g., a framework) evolves, its clients often need to adapt. Client developers might need to adapt to functionalities, client systems might need to be adapted to a new API, client users might need to adapt to a new User Interface. The consequences of such changes are yet unclear, what proportion of the ecosystem might be expected to react, how long might it take for a change to diffuse in the ecosystem, do all clients react in the same way? This paper reports on an exploratory study aimed at observing API evolution and its impact on a large-scale software ecosystem, Pharo, which has about 3,600 distinct systems, more than 2,800 contributors, and six years of evolution. We analyze 118 API changes and answer research questions regarding the magnitude, duration, extension, and consistency of such changes in the ecosystem. The results of this study help to characterize the impact of API evolution in large software ecosystems, and provide the basis to better understand how such impact can be alleviated.","","978-1-4673-7532-0","10.1109/ICSM.2015.7332471","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7332471","","Ecosystems;Open source software;Context;History;Computer science;Association rules","application program interfaces;software engineering;user interfaces","API evolution;Pharo ecosystem case;software engineering research;user interface;software ecosystems","","24","37","","23 Nov 2015","","","IEEE","IEEE Conferences"
"Documented Unix Facilities over 48 Years","D. Spinellis","Dept. of Manage. Sci. & Technol., Athens Univ. of Econ. & Bus., Athens, Greece","2018 IEEE/ACM 15th International Conference on Mining Software Repositories (MSR)","30 Dec 2018","2018","","","58","61","The documented Unix facilities data set provides the details regarding the evolution of 15596 unique facilities through 93 versions of Unix over a period of 48 years. It is based on the manual transcription of early scanned documents, on the curation of text obtained through optical character recognition, and on the automatic extraction of data from code available on the Unix History Repository. The data are categorized into user commands, system calls, C library functions, devices and special files, file formats and conventions, games et. al., miscellanea, system maintenance procedures and commands, and system kernel interfaces. A timeline view allows the visualization of the evolution across releases. The data can be used for empirical research regarding API evolution, system design, as well as technology adoption and trends.","2574-3864","978-1-4503-5716-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8595179","Unix;software evolution;API evolution","Manuals;History;Software;Market research;Documentation;Data mining;Libraries","application program interfaces;social aspects of automation;Unix","system maintenance procedures;system kernel interfaces;API evolution;system design;documented Unix facilities data;manual transcription;optical character recognition;user commands;file formats;Unix history repository;technology adoption;technology trends","","","12","","30 Dec 2018","","","IEEE","IEEE Conferences"
"A Case Study of Web API Evolution","S. M. Sohan; C. Anslow; F. Maurer","Dept. of Comput. Sci., Univ. of Calgary, Calgary, AB, Canada; Dept. of Comput. Sci., Univ. of Calgary, Calgary, AB, Canada; Dept. of Comput. Sci., Univ. of Calgary, Calgary, AB, Canada","2015 IEEE World Congress on Services","17 Aug 2015","2015","","","245","252","When applications are integrated using web APIs, changes on a web API may break the dependent applications. This problem exists because old versions of the APIs may no longer be supported, a lack of adequate documentation to upgrade to a newer version, and insufficient communication of changes. In this paper we conducted a case study of evolving Web APIs to investigate what changes are made between versions and how the changes are documented and communicated to the API users. The findings are a list of recommendations for practitioners and researchers based on API change profiles, versioning, documentation and communication approaches that are observed in practice. This study will help inform developers of evolving Web APIs to make decision about versioning, documentation and communication methods.","2378-3818","978-1-4673-7275-6","10.1109/SERVICES.2015.43","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7196531","Case Study;RESTful;SOAP;Web API Evolution;WSDL","Google;Documentation;Facebook;Business;Simple object access protocol;Industries;XML","application program interfaces;Internet;software maintenance;system documentation","API change profiles;Web API versioning;Web API documentation;Web API communication","","10","20","","17 Aug 2015","","","IEEE","IEEE Conferences"
"Exploring the Intent behind API Evolution: A Case Study","D. Hou; X. Yao","Electr. & Comput. Eng., Clarkson Univ., Potsdam, NY, USA; Comput. Sci., Clarkson Univ., Potsdam, NY, USA","2011 18th Working Conference on Reverse Engineering","17 Nov 2011","2011","","","131","140","Reuse has significantly improved software productivity and quality. An application interacts with a reused system through its Application Programming Interfaces (API). To make the life of the application developer easier, it is desirable for the API to be both sufficiently powerful and stable. Unfortunately, in reality APIs inevitably change, to be more powerful or to remove design flaws. This may create additional work for the application developer to adapt to the changed API. Thus, to counter the negative impacts of API evolution, we need to study how and why APIs are evolved. To that end, we performed a detailed analysis of the evolution of a production API. In particular, we categorized the changes to the API according to its domain semantics and design intent. We discussed the implications of our findings for both API designers and application developers.","2375-5369","978-1-4577-1948-6","10.1109/WCRE.2011.24","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6079836","Frameworks and libraries;APIs;software evolution;design intent;empirical studies","Java;Documentation;History;Libraries;Production;Catalogs;Data mining","application program interfaces;software quality;software reusability","API evolution;software productivity;software quality;software reusability;application programming interface","","20","21","","17 Nov 2011","","","IEEE","IEEE Conferences"
"API-Evolution Support with Diff-CatchUp","Z. Xing; E. Stroulia","Univ of Alberta, Edmonton; Univ of Alberta, Edmonton","IEEE Transactions on Software Engineering","5 Nov 2007","2007","33","12","818","836","Applications built on reusable component frameworks are subject to two independent, and potentially conflicting, evolution processes. The application evolves in response to the specific requirements and desired qualities of the application's stakeholders. On the other hand, the evolution of the component framework is driven by the need to improve the framework functionality and quality while maintaining its generality. Thus, changes to the component framework frequently change its API on which its client applications rely and, as a result, these applications break. To date, there has been some work aimed at supporting the migration of client applications to newer versions of their underlying frameworks, but it usually requires that the framework developers do additional work for that purpose or that the application developers use the same tools as the framework developers. In this paper, we discuss our approach to tackle the API-evolution problem in the context of reuse-based software development, which automatically recognizes the API changes of the reused framework and proposes plausible replacements to the ""obsolete"" API based on working examples of the framework code base. This approach has been implemented in the Diff-CatchUp tool. We report on two case studies that we have conducted to evaluate the effectiveness of our approach with its Diff-CatchUp prototype.","1939-3520","","10.1109/TSE.2007.70747","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4359473","D.2.2.eProgrammer workbench;D.2.3Coding Tools and Techniques;D.2.3.aObject-oriented programming;D.2.10.g Object-oriented design methods;D.2.2.eProgrammer workbench;D.2.3Coding Tools and Techniques;D.2.3.aObject-oriented programming;D.2.10.g Object-oriented design methods","Application software;Programming;Software prototyping;Prototypes;Costs;Software engineering;Software tools;Documentation","application program interfaces;object-oriented programming;software maintenance;software prototyping;software quality;software reusability;software tools","API-evolution support;reuse-based software development;Diff-CatchUp tool;reusable component framework evolution;component framework functionality;component framework quality;component framework maintenance;client application migration","","58","27","","5 Nov 2007","","","IEEE","IEEE Journals"
"An Experience Report of the API Evolution and Maintenance for Software Platforms","H. Kwon; J. Ahn; S. Choi; J. Siewierski; P. Kosko; P. Szydelko","Samsung Res., Samsung Electron., Seoul, South Korea; Samsung Res., Samsung Electron., Seoul, South Korea; Samsung Res., Samsung Electron., Seoul, South Korea; Samsung R&D Inst. Poland, Samsung Electron., Warsaw, Poland; Samsung R&D Inst. Poland, Samsung Electron., Warsaw, Poland; Samsung R&D Inst. Poland, Samsung Electron., Warsaw, Poland","2018 IEEE International Conference on Software Maintenance and Evolution (ICSME)","11 Nov 2018","2018","","","587","590","Development and maintenance of software plat-form APIs are challenging because new APIs are constantly added in new software platforms. Furthermore, software plat-form API development requires a lot of stakeholders to work together on tight release schedules. Application developers use platform's APIs to create their applications and therefore providing a well-defined and comprehensive set of platform APIs may be the most basic requirement for software platforms. To provide such APIs, API usability should be secured and API backward compatibility should be guaranteed in subsequent platform re-leases. In these circumstances, sharing lessons learned from multiple years of experience of platform API development, mainte-nance, and releases using an integrated API development process can benefit API researchers and practitioners who have similar needs to create or adopt API development process for their projects. In this paper we share an API development and mainte-nance process for multi-device Tizen software platform, which we call the Tizen API Change Request (ACR) process. The process has been used among various Tizen API stakeholders for several years of Tizen platform and SDK releases to keep API usability and compatibility high. We believe the process can be further applied to various software platforms and projects to systematically develop and maintain their APIs.","2576-3148","978-1-5386-7870-1","10.1109/ICSME.2018.00034","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8530070","API development;API maintenance;software platform APIs;API review;multi-device APIs","Stakeholders;Tools;Usability;Security;Maintenance engineering;Electronic mail","application program interfaces;software maintenance","API evolution;application developers;platform APIs;API usability;API backward compatibility;platform API development;integrated API development process;API researchers;multidevice Tizen software platform;Tizen API stakeholders;Tizen API change request process;subsequent platform releases;software platform API development","","1","22","","11 Nov 2018","","","IEEE","IEEE Conferences"
"CatchUp! Capturing and replaying refactorings to support API evolution","J. Henkel; A. Diwan","Colorado Univ., Boulder, CO, USA; Colorado Univ., Boulder, CO, USA","Proceedings. 27th International Conference on Software Engineering, 2005. ICSE 2005.","19 Dec 2005","2005","","","274","283","Library developers who have to evolve a library to accommodate changing requirements often face a dilemma: Either they implement a clean, efficient solution but risk breaking client code, or they maintain compatibility with client code, but pay with increased design complexity and thus higher maintenance costs over time. We address this dilemma by presenting a lightweight approach for evolving application programming interfaces (APIs), which does not depend on version control or configuration management systems. Instead, we capture API refactoring actions as a developer evolves an API. Users of the API can then replay the refactorings to bring their client software components up to date. We present CatchUp!, an implementation of our approach that captures and replays refactoring actions within an integrated development environment semi-automatically. Our experiments suggest that our approach could be valuable in practice.","1558-1225","1-59593-963-2","10.1109/ICSE.2005.1553570","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1553570","","Costs;Application software;Permission;Software maintenance;Software reusability;Software libraries;Java;Lighting control;Control systems;Software engineering","application program interfaces;software libraries;programming environments;software maintenance;computer aided software engineering","API evolution;software library development;application programming interfaces;API refactoring;integrated development environment","","21","8","","19 Dec 2005","","","IEEE","IEEE Conferences"
"The role of refactorings in API evolution","D. Dig; R. Johnson","Dept. of Comput. Sci., Illinois Univ., Urbana-Champaign, IL, USA; Dept. of Comput. Sci., Illinois Univ., Urbana-Champaign, IL, USA","21st IEEE International Conference on Software Maintenance (ICSM'05)","21 Nov 2005","2005","","","389","398","Frameworks and libraries change their APIs. Migrating an application to the new API is tedious and disrupts the development process. Although some tools and ideas have been proposed to solve the evolution of APIs, most updates are done manually. To better understand the requirements for migration tools we studied the API changes of three frameworks and one library. We discovered that the changes that break existing applications are not random, but they tend to fall into particular categories. Over 80% of these changes are refactorings. This suggests that refactoring-based migration tools should be used to update applications.","1063-6773","0-7695-2368-4","10.1109/ICSM.2005.90","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1510134","","Application software;Software libraries;Software maintenance;Programming profession;Computer science;Software systems;Costs;Computer languages;Operating systems","application program interfaces;software prototyping;software libraries;software tools;software maintenance","API evolution;refactoring-based migration tools","","52","28","","21 Nov 2005","","","IEEE","IEEE Conferences"
"Coping with API Evolution for Running, Mission-Critical Applications Using Virtual Execution Environment","B. Gharaibeh; T. N. Nguyen; J. M. Chang",Iowa State University; Iowa State University; Iowa State University,"Seventh International Conference on Quality Software (QSIC 2007)","21 Nov 2007","2007","","","171","180","Recent research showed that the majority of compatibility-breaking changes in a component-based, object-oriented software system are refactorings [5]. The software updating process in such system with the presence of heavily refactored application programming interface (API) is largely manual and disruptive to running, mission-critical applications, which are expected to run continuously without any interruptions. To address the online, API update issue for mission-critical systems, we have developed an online updating framework based on virtual execution environment (VEE) such as Java virtual machine. The framework extends the VEE to take the API change log, which records changes to API components, and seamlessly apply proper updates to the running system without human intervention and without shutting down the system. This framework was implemented as an extension to Jikes Research virtual machine. Our experimental study showed that our online update tool requires little overhead while maintaining the consistent state of the updated running application.","2332-662X","978-0-7695-3035-2","10.1109/QSIC.2007.4385493","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4385493","","Mission critical systems;Application software;Virtual machining;Software systems;Software maintenance;Java;Humans;Programming;Software tools;Computer errors","application program interfaces;Java;object-oriented programming;software maintenance;virtual machines","API evolution;mission-critical application;virtual execution environment;component-based software;object-oriented software system;software refactoring;application programming interface;online software updating framework;Java virtual machine","","1","24","","21 Nov 2007","","","IEEE","IEEE Conferences"
"APIEvolutionMiner: Keeping API evolution under control","A. Hora; A. Etien; N. Anquetil; S. Ducasse; M. T. Valente","RMoD team, Inria, Lille, France; RMoD team, Inria, Lille, France; RMoD team, Inria, Lille, France; RMoD team, Inria, Lille, France; Department of Computer Science, UFMG, Belo Horizonte, Brazil","2014 Software Evolution Week - IEEE Conference on Software Maintenance, Reengineering, and Reverse Engineering (CSMR-WCRE)","27 Feb 2014","2014","","","420","424","During software evolution, source code is constantly refactored. In real-world migrations, many methods in the newer version are not present in the old version (e.g.,60% of the methods in Eclipse 2.0 were not in version 1.0). This requires changes to be consistently applied to reflect the new API and avoid further maintenance problems. In this paper, we propose a tool to extract rules by monitoring API changes applied in source code during system evolution. In this process, changes are mined at revision level in code history. Our tool focuses on mining invocation changes to keep track of how they are evolving. We also provide three case studies in order to evaluate the tool.","","978-1-4799-3752-3","10.1109/CSMR-WCRE.2014.6747209","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6747209","","Itemsets;History;Association rules;Receivers;Software;Browsers","application program interfaces;data mining;software engineering;source code (software)","APIEvolutionMiner;API evolution;software evolution;source code;real-world migrations;API changes;code history;invocation change mining","","12","12","","27 Feb 2014","","","IEEE","IEEE Conferences"
"Bridging the Divide Between API Users and API Developers by Mining Public Code Repositories","M. Lamothe","Concordia University,Department of Computer Science and Software Engineering,Montreal,Canada","2020 IEEE/ACM 42nd International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)","1 Dec 2020","2020","","","178","181","Software application programming interfaces (APIs) are a ubiquitous part of Software Engineering. The evolution of these APIs requires constant effort from their developers and users alike. API developers must constantly balance keeping their products modern whilst keeping them as stable as possible. Meanwhile, API users must continually be on the lookout to adapt to changes that could break their applications. As APIs become more numerous, users are challenged by a myriad of choices and information on which API to use. Current research attempts to provide automatic documentation, code examples, and code completion to make API evolution more scalable for users. Our work will attempt to establish practical and scalable API evolution guidelines and tools based on public code repositories, to aid both API users and API developers. This thesis focuses on investigating the use of public code repositories provided by the open-source community to improve software API engineering practices. More specifically, I seek to improve software engineering practices linked to API evolution, both from the perspective of API users and API developers. To achieve this goal, I will apply quantitative and qualitative research methods to understand the problems at hand. I will then mine public code repositories to develop novel solutions to these problems.","2574-1926","978-1-4503-7122-3","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9270386","Software API;Empirical Software Engineering;API Workarounds;API Migration;API Evolution;Mining Software Repositories","Software engineering;Tools;Software;Open source software;Data mining;Maintenance engineering;Documentation","application program interfaces;software engineering","API developers;API evolution;software API;public code repositories mining;software application programming interfaces","","","22","","1 Dec 2020","","","IEEE","IEEE Conferences"
"Challenges of SonarQube Plug-In Maintenance","B. Barta; G. Manz; I. Siket; R. Ferenc","Department of Software Engineering, University of Szeged Árpád tér 2., Szeged, H-6720, Hungary; Department of Software Engineering, University of Szeged Árpád tér 2., Szeged, H-6720, Hungary; Department of Software Engineering, University of Szeged Árpád tér 2., Szeged, H-6720, Hungary; FrontEndART Software Ltd. Zászló u. 3 I./5., Szeged, H-6722, Hungary","2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER)","18 Mar 2019","2019","","","574","578","The SONARQUBETM platform is a widely used open-source tool for continuous code quality management. It provides an API to extend the platform with plug-ins to upload additional data or to enrich its functionalities. The SourceMeter plug-in for SONARQUBETM platform integrates the SourceMeter static source code analyzer tool into the SONARQUBETM platform, i.e., uploads the analysis results and extends the GUI to be able to present the new results. The first version of the plug-in was released in 2015 and was compatible with the corresponding SONARQUBETM version. However, the platform - and what is more important, its API - have evolved a lot since then, therefore the plug-in had to be adapted to the new API. It was not just a slight adjustment, though, because we had to redesign and reimplement the whole UI and, at the same time, perform significant alterations in other parts of the plug-in as well. Besides, we examined the effect of the API evolution on other open-source plug-ins and found that most of them still remain compatible with the latest version, even if they have not been updated alongside the underlying API modifications. The reason for this is that these plug-ins use only a small part of the API that have not changed over time.","1534-5351","978-1-7281-0591-8","10.1109/SANER.2019.8667988","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8667988","SourceMeter;SonarQube;plug-in;API;evolution;software quality;metrics;clone detection;coding issues","Graphical user interfaces;Measurement;Tools;Open source software;Encoding;Java","application program interfaces;graphical user interfaces;program diagnostics;public domain software;software maintenance;software management;software quality;software tools;source code (software)","open-source plug-ins;open-source tool;continuous code quality management;SourceMeter plug-in;SourceMeter static source code analyzer tool;API evolution;SONARQUBE plug-in maintenance;SONARQUBE platform;GUI;API modifications","","","10","","18 Mar 2019","","","IEEE","IEEE Conferences"
"The Python/C API: Evolution, Usage Statistics, and Bug Patterns","M. Hu; Y. Zhang","Lab for Intelligent Networking and Knowledge Engineering (LINKE), University of Science and Technology of China,Hefei,China; Lab for Intelligent Networking and Knowledge Engineering (LINKE), University of Science and Technology of China,Hefei,China","2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER)","2 Apr 2020","2020","","","532","536","Python has become one of the most popular programming languages in the era of data science and machine learning, especially for its diverse libraries and extension modules. Python front-end with C/C++ native implementation achieves both productivity and performance, almost becoming the standard structure for many mainstream software systems. However, feature discrepancies between two languages can pose many security hazards in the interface layer using the Python/C API. In this paper, we applied static analysis to reveal the evolution and usage statistics of the Python/C API, and provided a summary and classification of its 10 bug patterns with empirical bug instances from Pillow, a widely used Python imaging library. Our toolchain can be easily extended to access different types of syntactic bug-finding checkers. And our systematical taxonomy to classify bugs can guide the construction of more highly automated and high-precision bug-finding tools.","1534-5351","978-1-7281-5143-4","10.1109/SANER48275.2020.9054835","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9054835","Python/C API;Static analysis;Evolution analysis;Fact extraction;Bug pattern","","application program interfaces;formal verification;pattern classification;program debugging;program diagnostics;Python;security of data","usage statistics;data science;programming language;machine learning;syntactic bug-finding checkers;bug-finding tools;Python/C API;interface layer security;static analysis;bug pattern classification;Pillow;Python imaging library","","","23","","2 Apr 2020","","","IEEE","IEEE Conferences"
"[Journal First] Analyzing a Decade of Linux System Calls","M. Bagherzadeh; N. Kahani; C. Bezemer; A. E. Hassan; J. Dingel; J. R. Cordy","Sch. of Comput., Queen's Univ., Kingston, ON, Canada; Sch. of Comput., Queen's Univ., Kingston, ON, Canada; Sch. of Comput., Queen's Univ., Kingston, ON, Canada; Sch. of Comput., Queen's Univ., Kingston, ON, Canada; Sch. of Comput., Queen's Univ., Kingston, ON, Canada; Sch. of Comput., Queen's Univ., Kingston, ON, Canada","2018 IEEE/ACM 40th International Conference on Software Engineering (ICSE)","2 Sep 2018","2018","","","267","267","Over the past 25 years, thousands of developers have contributed more than 18 million lines of code (LOC) to the Linux kernel. As the Linux kernel forms the central part of various operating systems that are used by millions of users, the kernel must be continuously adapted to the changing demands and expectations of these users. The Linux kernel provides its services to an application through system calls. The combined set of all system calls forms the essential Application Programming Interface (API) through which an application interacts with the kernel. In this paper, we conduct an empirical study of 8,770 changes that were made to Linux system calls during the last decade (i.e., from April 2005 to December 2014). In particular, we study the size of the changes, and we manually identify the type of changes and bug fixes that were made. Our analysis provides an overview of the evolution of the Linux system calls over the last decade. We find that there was a considerable amount of technical debt in the kernel, that was addressed by adding a number of sibling calls (i.e., 26% of all system calls). In addition, we find that by far, the ptraceand signal handling system calls are the most challenging to maintain. Our study can be used by developers who want to improve the design and ensure the successful evolution of their own kernel APIs.","1558-1225","978-1-4503-5638-1","10.1145/3180155.3182518","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8453085","Linux kernel;System calls;API evolution;Software evolution","Linux;Kernel;Computer bugs;Software engineering;Maintenance engineering;Testing","application program interfaces;Linux;operating system kernels;program debugging","essential application programming interface;kernel API;sibling calls;operating systems;Linux kernel forms;Linux system calls","","","","","2 Sep 2018","","","IEEE","IEEE Conferences"
"A Dataset for API Usage","A. A. Sawant; A. Bacchelli","SORCERERS @ SERG, Delft Univ. of Technol., Delft, Netherlands; SORCERERS @ SERG, Delft Univ. of Technol., Delft, Netherlands","2015 IEEE/ACM 12th Working Conference on Mining Software Repositories","6 Aug 2015","2015","","","506","509","An Application Programming Interface (API) provides a specific set of functionalities to a developer. The main aim of an API is to encourage the reuse of already existing functionality. There has been some work done into API popularity trends, API evolution and API usage. For all the aforementioned research avenues there has been a need to mine the usage of an API in order to perform any kind of analysis. Each one of the approaches that has been employed in the past involved a certain degree of inaccuracy as there was no type check that takes place. We introduce an approach that takes type information into account while mining API method invocations and annotation usages. This approach accurately makes a connection between a method invocation and the class of the API to which the method belongs to. We try collecting as many usages of an API as possible, this is achieved by targeting projects hosted on GitHub. Additionally, we look at the history of every project to collect the usage of an API from earliest version onwards. By making such a large and rich dataset public, we hope to stimulate some more research in the field of APIs with the aid of accurate API usage samples.","2160-1860","978-0-7695-5594-2","10.1109/MSR.2015.75","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7180129","API usage;GitHub;dataset","Java;History;Databases;Data mining;Libraries;Software;Market research","application program interfaces;software reusability","application programming interface;functionality reuse;API popularity trends;API evolution;API method invocationusage mining;API method annotation usage mining;GitHub;public dataset","","15","16","","6 Aug 2015","","","IEEE","IEEE Conferences"
"An Empirical Study of API Stability and Adoption in the Android Ecosystem","T. McDonnell; B. Ray; M. Kim","Dept. of Electr. & Comput. Eng., Univ. of Texas at Austin, Austin, TX, USA; Dept. of Electr. & Comput. Eng., Univ. of Texas at Austin, Austin, TX, USA; Dept. of Electr. & Comput. Eng., Univ. of Texas at Austin, Austin, TX, USA","2013 IEEE International Conference on Software Maintenance","2 Dec 2013","2013","","","70","79","When APIs evolve, clients make corresponding changes to their applications to utilize new or updated APIs. Despite the benefits of new or updated APIs, developers are often slow to adopt the new APIs. As a first step toward understanding the impact of API evolution on software ecosystems, we conduct an in-depth case study of the co-evolution behavior of Android API and dependent applications using the version history data found in github. Our study confirms that Android is evolving fast at a rate of 115 API updates per month on average. Client adoption, however, is not catching up with the pace of API evolution. About 28% of API references in client applications are outdated with a median lagging time of 16 months. 22% of outdated API usages eventually upgrade to use newer API versions, but the propagation time is about 14 months, much slower than the average API release interval (3 months). Fast evolving APIs are used more by clients than slow evolving APIs but the average time taken to adopt new versions is longer for fast evolving APIs. Further, API usage adaptation code is more defect prone than the one without API usage adaptation. This may indicate that developers avoid API instability.","1063-6773","978-0-7695-4981-1","10.1109/ICSM.2013.18","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6676878","","Androids;Humanoid robots;Smart phones;Google;Mobile communication;Software;History","application program interfaces;mobile computing;operating systems (computers);software maintenance","API usage adaptation code;github;version history data;Android API coevolution behavior;software ecosystems;API evolution;Android ecosystem;API stability","","111","30","","2 Dec 2013","","","IEEE","IEEE Conferences"
"How Android Developers Handle Evolution-induced API Compatibility Issues: A Large-scale Study","H. Xia; Y. Zhang; Y. Zhou; X. Chen; Y. Wang; X. Zhang; S. Cui; G. Hong; X. Zhang; M. Yang; Z. Yang","NA; NA; Fudan University; Fudan University; Fudan University; Purdue University; Fudan University; Fudan University; Fudan University; Shanghai Institute of Intelligent Electronics & Systems, Shanghai Institute for Advanced Communication and Data Science, and Engineering Research Center of CyberSecurity Auditing and Monitoring,Ministry of Education,China; Fudan University","2020 IEEE/ACM 42nd International Conference on Software Engineering (ICSE)","21 Dec 2020","2020","","","886","898","As Android platform evolves in a fast pace, API-related compatibility issues become a significant challenge for developers. To handle an incompatible API invocation, developers mainly have two choices: merely performing sufficient checks to avoid invoking incompatible APIs on platforms that do not support them, or gracefully providing replacement implementations on those incompatible platforms. As providing more consistent app behaviors, the latter one is more recommended and more challenging to adopt. However, it is still unknown how these issues are handled in the real world, do developers meet difficulties and what can we do to help them. In light of this, this paper performs the first large-scale study on the current practice of handling evolution-induced API compatibility issues in about 300,000 Android market apps, and more importantly, their solutions (if exist). Actually, it is in general very challenging to determine if developers have put in countermeasure for a compatibility issue, as different APIs have diverse behaviors, rendering various repair. To facilitate a large-scale study, this paper proposes RAPID, an automated tool to determine whether a compatibility issue has been addressed or not, by incorporating both static analysis and machine learning techniques. Results show that our trained classifier is quite effective by achieving a F1-score of 95.21% and 91.96% in the training stage and the validation stage respectively. With the help of RAPID, our study yields many interesting findings, e.g. developers are not willing to provide alternative implementations when handling incompatible API invocations (only 38.4%); for those incompatible APIs that Google gives replacement recommendations, the ratio of providing alternative implementations is significantly higher than those without recommendations; developers find more ways to repair compatibility issues than Google's recommendations and the knowledge acquired from these experienced developers would be extremely useful to novice developers and may significantly improve the current status of compatibility issue handling.","1558-1225","978-1-4503-7121-6","","National Natural Science Foundation of China; Natural Science Foundation of Shanghai; NSF; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9284041","Compatibility Issues;API Evolution;Android App Analysis","Training;Static analysis;Maintenance engineering;Tools;Rendering (computer graphics);Internet;Software engineering","","","","","54","","21 Dec 2020","","","IEEE","IEEE Conferences"
"How Do Python Framework APIs Evolve? An Exploratory Study","Z. Zhang; H. Zhu; M. Wen; Y. Tao; Y. Liu; Y. Xiong","Southern University of Science and Technology,Department of Computer Science and Engineering,Shenzhen,China; Southern University of Science and Technology,Department of Computer Science and Engineering,Shenzhen,China; School of Cyber Sci. and Engr., Huazhong Univ. of Sci. and Tech.,Wuhan,China; College of Comp. Sci. and Soft. Engr., Shenzhen University,Shenzhen,China; Southern University of Science and Technology,Department of Computer Science and Engineering,Shenzhen,China; EECS, Peking University,Department of Computer Science and Technology,Beijing,China","2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER)","2 Apr 2020","2020","","","81","92","Python is a popular dynamic programming language. In recent years, many frameworks implemented in Python have been widely used for data science and web development. Similar to frameworks in other languages, the APIs provided by Python frameworks often evolve, which would inevitably induce compatibility issues in client applications. While existing work has studied the evolution of frameworks in static programming languages such as Java, little is known on how Python framework APIs evolve and the characteristics of the compatibility issues induced by such evolution. To bridge this gap, we take a first look at the evolution of Python framework APIs and the resulting compatibility issues in client applications. We analyzed 288 releases of six popular Python frameworks from three different domains and 5,538 open-source projects built on these frameworks. We investigated the evolution patterns of Python framework APIs and found that they largely differ from those of Java framework APIs. We also investigated the compatibility issues in client applications and identified common strategies that developers adopt to fix these issues. Based on the empirical findings, we designed and implemented a tool, PYCOMPAT, to automatically detect compatibility issues caused by misusing evolved framework APIs in Python applications. Experiments on 10 real-world projects show that our tool can effectively detect compatibility issues of developers' concern.","1534-5351","978-1-7281-5143-4","10.1109/SANER48275.2020.9054800","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9054800","Python;API evolution;compatibility;dynamic programming language","","application program interfaces;Java;programming languages;public domain software","static programming languages;Python framework;client applications;Java framework APIs;dynamic programming language;open-source projects","","","60","","2 Apr 2020","","","IEEE","IEEE Conferences"
"A First Look at the Deprecation of RESTful APIs: An Empirical Study","J. Yasmin; Y. Tian; J. Yang","Queen’s University,School of Computing,Kingston,Canada; Queen’s University,School of Computing,Kingston,Canada; Concordia University,Department of Computer Science and Software Engineering,Montreal,Canada","2020 IEEE International Conference on Software Maintenance and Evolution (ICSME)","2 Nov 2020","2020","","","151","161","REpresentational State Transfer (REST) is considered as one standard software architectural style to build web APIs that can integrate software systems over the internet. However, while connecting systems, RESTful APIs might also break the dependent applications that rely on their services when they introduce breaking changes, e.g., an older version of the API is no longer supported. To warn developers promptly and thus prevent critical impact on downstream applications, a deprecated-removed model should be followed, and deprecation-related information such as alternative approaches should also be listed. While API deprecation analysis as a theme is not new, most existing work focuses on non-web APIs, such as the ones provided by Java and Android.To investigate RESTful API deprecation, we propose a framework called RADA (RESTful API Deprecation Analyzer). RADA is capable of automatically identifying deprecated API elements and analyzing impacted operations from an OpenAPI specification, a machine-readable profile for describing RESTful web service. We apply RADA on 2,224 OpenAPI specifications of 1,368 RESTful APIs collected from APIs.guru, the largest directory of OpenAPI specifications. Based on the data mined by RADA, we perform an empirical study to investigate how the deprecated-removed protocol is followed in RESTful APIs and characterize practices in RESTful API deprecation. The results of our study reveal several severe deprecation-related problems in existing RESTful APIs. Our implementation of RADA and detailed empirical results are publicly available for future intelligent tools that could automatically identify and migrate usage of deprecated RESTful API operations in client code.","2576-3148","978-1-7281-5619-4","10.1109/ICSME46990.2020.00024","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9240687","API Deprecation;RESTful API;OpenAPI Specification;Web API;Evolution of Web APIs","Software maintenance;Web services;Restful API;Tools;Software systems;Representational state transfer;Standards","application program interfaces;data mining;Java;software architecture;Web services","deprecated RESTful API operations;web APIs;deprecated-removed model;deprecation-related information;API deprecation analysis;RADA;RESTful API Deprecation Analyzer;deprecated API elements;OpenAPI specification;RESTful web service;OpenAPI specifications;nonweb APIs","","","38","","2 Nov 2020","","","IEEE","IEEE Conferences"
"Exploring API/Client Co-Evolution","A. M. Eilertsen; A. H. Bagge","Dept. of Inf., Univ. of Bergen, Bergen, Norway; Dept. of Inf., Univ. of Bergen, Bergen, Norway","2018 IEEE/ACM 2nd International Workshop on API Usage and Evolution (WAPI)","23 Aug 2018","2018","","","10","13","Software libraries evolve over time, as do their APIs and the clients that use them. Studying this co-evolution of APIs and API clients can give useful insights into both how to manage the co-evolution, and how to design software so that it is more resilient against API changes. In this paper, we discuss problems and challenges of API and client code co-evolution, and the tools and methods we will need to resolve them.","","978-1-4503-5754-8","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8443581","API evolution;Co-evolution;repository mining;software evolution;bytecode analysis","Software;Tools;Data mining;Libraries;Java;Semantics;Syntactics","application program interfaces;software libraries;software maintenance","API/Client Co-Evolution;software libraries;API clients;API changes;client code co-evolution;software design","","","15","","23 Aug 2018","","","IEEE","IEEE Conferences"
"Automated API Property Inference Techniques","M. P. Robillard; E. Bodden; D. Kawrykow; M. Mezini; T. Ratchford","McGill University, Montréal; Technische Universität Darmstadt, Darmstadt; McGill University, Montréal; Technische Universität Darmstadt, Darmstadt; McGill University, Montréal","IEEE Transactions on Software Engineering","29 Apr 2013","2013","39","5","613","637","Frameworks and libraries offer reusable and customizable functionality through Application Programming Interfaces (APIs). Correctly using large and sophisticated APIs can represent a challenge due to hidden assumptions and requirements. Numerous approaches have been developed to infer properties of APIs, intended to guide their use by developers. With each approach come new definitions of API properties, new techniques for inferring these properties, and new ways to assess their correctness and usefulness. This paper provides a comprehensive survey of over a decade of research on automated property inference for APIs. Our survey provides a synthesis of this complex technical field along different dimensions of analysis: properties inferred, mining techniques, and empirical results. In particular, we derive a classification and organization of over 60 techniques into five different categories based on the type of API property inferred: unordered usage patterns, sequential usage patterns, behavioral specifications, migration mappings, and general information.","1939-3520","","10.1109/TSE.2012.63","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6311409","API property;programming rules;specifications;protocols;interface;data mining;pattern mining;API evolution;API usage pattern","Itemsets;Context;Association rules;Protocols;Programming;Software engineering","application program interfaces;data mining;pattern classification","automated API property inference technique;application programming interfaces;properties inferred;mining techniques;empirical results;technique classification;unordered usage patterns;sequential usage patterns;behavioral specifications;migration mappings;general information","","78","109","","24 Sep 2012","","","IEEE","IEEE Journals"
"Why and how Java developers break APIs","A. Brito; L. Xavier; A. Hora; M. T. Valente","ASERG Group, Department of Computer Science (DCC), Federal University of Minas Gerais, Brazil; ASERG Group, Department of Computer Science (DCC), Federal University of Minas Gerais, Brazil; Faculty of Computer Science (FACOM), Federal University of Mato Grosso do Sul, Brazil; ASERG Group, Department of Computer Science (DCC), Federal University of Minas Gerais, Brazil","2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER)","5 Apr 2018","2018","","","255","265","Modern software development depends on APIs to reuse code and increase productivity. As most software systems, these libraries and frameworks also evolve, which may break existing clients. However, the main reasons to introduce breaking changes in APIs are unclear. Therefore, in this paper, we report the results of an almost 4-month long field study with the developers of 400 popular Java libraries and frameworks. We configured an infrastructure to observe all changes in these libraries and to detect breaking changes shortly after their introduction in the code. After identifying breaking changes, we asked the developers to explain the reasons behind their decision to change the APIs. During the study, we identified 59 breaking changes, confirmed by the developers of 19 projects. By analyzing the developers' answers, we report that breaking changes are mostly motivated by the need to implement new features, by the desire to make the APIs simpler and with fewer elements, and to improve maintainability. We conclude by providing suggestions to language designers, tool builders, software engineering researchers and API developers.","","978-1-5386-4969-5","10.1109/SANER.2018.8330214","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8330214","API Evolution;Breaking Changes;Field Study","Libraries;Java;Tools;Electronic mail;Software engineering;Software","application program interfaces;Java;software libraries;software maintenance;software reusability","API developers;Java developers;modern software development;Java libraries;breaking changes;code reuse;software systems","","10","45","","5 Apr 2018","","","IEEE","IEEE Conferences"
"APIDiff: Detecting API breaking changes","A. Brito; L. Xavier; A. Hora; M. T. Valente","ASERG Group, Department of Computer Science (DCC), Federal University of Minas Gerais, Brazil; ASERG Group, Department of Computer Science (DCC), Federal University of Minas Gerais, Brazil; Faculty of Computer Science (FACOM), Federal University of Mato Grosso do Sul, Brazil; ASERG Group, Department of Computer Science (DCC), Federal University of Minas Gerais, Brazil","2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER)","5 Apr 2018","2018","","","507","511","Libraries are commonly used to increase productivity. As most software systems, they evolve over time and changes are required. However, this process may involve breaking compatibility with previous versions, leading clients to fail. In this context, it is important that libraries creators and clients frequently assess API stability in order to better support their maintenance practices. In this paper, we introduce APIDIFF, a tool to identify API breaking and non-breaking changes between two versions of a Java library. The tool detects changes on three API elements: types, methods, and fields. We also report usage scenarios of APIDIFF with four real-world Java libraries.","","978-1-5386-4969-5","10.1109/SANER.2018.8330249","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8330249","API Evolution;Breaking Changes;Mining Software Repositories","Libraries;Tools;History;Java;Software;Contracts","application program interfaces;Java;software libraries;software maintenance","libraries creators;software systems;API breaking changes;APIDiff;real-world Java libraries;API elements;Java library;APIDIFF;API stability","","2","25","","5 Apr 2018","","","IEEE","IEEE Conferences"
"ACUA: API Change and Usage Auditor","W. Wu; B. Adams; Y. Guéhéneuc; G. Antoniol","DGIGL, Ecole Polytech. de Montreal, Montreal, QC, Canada; DGIGL, Ecole Polytech. de Montreal, Montreal, QC, Canada; DGIGL, Ecole Polytech. de Montreal, Montreal, QC, Canada; DGIGL, Ecole Polytech. de Montreal, Montreal, QC, Canada","2014 IEEE 14th International Working Conference on Source Code Analysis and Manipulation","6 Dec 2014","2014","","","89","94","Modern software uses frameworks through their Application Programming Interfaces (APIs). Framework APIs may change while frameworks evolve. Client programs have to upgrade to new releases of frameworks if security vulnerabilities are discovered in the used releases. Patching security vulnerabilities can be delayed by non-security-related API changes when the frameworks used by client programs are not up to date. Keeping frameworks updated can reduce the reaction time to patch security leaks. Client program upgrades are not cost free, developers need to understand the API usages in client programs and API changes between framework releases before conduct upgrading tasks. In this paper, we propose a tool ACUA to generate reports containing detailed API change and usage information by analyzing the binary code of both frameworks and clients programs written in Java. Developers can use the API change and usage reports generated by ACUA to estimate the work load and decide when to starting upgrading client programs based on the estimation.","","978-1-4799-6148-1","10.1109/SCAM.2014.33","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6975642","Software maintenance;framework API evolution;API change and usage","Abstracts;Contracts;Analytical models;Security;Detection algorithms;Data models;Software","application program interfaces;Java;safety-critical software;source code (software)","ACUA;API Change-and-Usage Auditor;software usage framework;application programming interfaces;client program upgrade;security vulnerabilities;nonsecurity-related API changes;reaction time reduction;security leakage patching;framework release;binary code analysis;Java;work load estimation","","4","23","","6 Dec 2014","","","IEEE","IEEE Conferences"
"Type-Safe Evolution of Web Services","J. Campinhos; J. C. Seco; J. Cunha","NOVA LINCS, Univ. NOVA de Lisboa, Lisbon, Portugal; NOVA LINCS, Univ. NOVA de Lisboa, Lisbon, Portugal; NOVA LINCS, Univ. NOVA de Lisboa, Lisbon, Portugal","2017 IEEE/ACM 2nd International Workshop on Variability and Complexity in Software Design (VACE)","7 Jul 2017","2017","","","20","26","Applications based on micro or web services have had significant growth due to the exponential increase in the use of mobile devices. However, using such kind of loosely coupled interfaces provides almost no guarantees to the developer in terms of evolution. Changes to service interfaces can be introduced at any moment, which may cause the system to fail due to mismatches between communicating parts. In this paper, we present a programming model that allows the development of web service applications, server end-points and their clients, in such a way that the evolution of services' implementation does not cause the disruption of the client. Our approach is based on a type based code slicing technique that ensures that each version only refers to type compatible code, of the same version or of a compatible version, and that each client request is redirected to the most recent type compatible version implemented by the server. We abstract the notion of version and parametrize type compatibility on the relation between versions. The relation between versions is tagged with compatibility levels, so to capture the common conventions used in software development. Our implementation allows multiple versions of a service to be deployed simultaneously, while reusing code between versions in a type safe way. We describe a prototype framework, based on code transformation, for server-side JavaScript code, and using Flow as verification tool.","","978-1-5386-2803-4","10.1109/VACE.2017.6","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7968059","API evolution;web services;type safe;JavaScript","Servers;Web services;Context;Dispatching;Prototypes","Java;mobile computing;program slicing;program verification;software reusability;Web services","type-safe evolution;Web service applications;mobile devices;loosely coupled interfaces;communicating parts;server end-points;type based code slicing technique;compatibility levels;software development;code reuse;prototype framework;code transformation;server-side JavaScript code;verification tool","","1","17","","7 Jul 2017","","","IEEE","IEEE Conferences"
"Web Platform API Design Principles and Service Contract","Y. Chen; X. Xu; L. Zhu","NICTA, Eveleigh, SA, Australia; NICTA, Eveleigh, SA, Australia; NICTA, Eveleigh, SA, Australia","2012 19th Asia-Pacific Software Engineering Conference","18 Feb 2013","2012","1","","877","886","The emergence of web services gives rise to service ecosystems, where core service platforms are exposed through APIs to a large number of third parties to provide new solutions. This often requires platform APIs to be able to evolve rapidly while not breaking backward compatibility in order to support a wider range of planned and unplanned use. The REST architecture style allows a service contract to be negotiated and delivered at runtime aiming to achieve higher level of evolvability. However this potential is often not fully realized due to the lack of systematic approach in architecture design to separate requirement-related contract elements from specification-related elements and integrate them into the overall API design. In this paper, we present a novel approach to designing service platform APIs in order to achieve high evolvability. We firstly apply the problem frames approach to better understand the interface coupling and the evolution of requirements. Based on the problem frame analysis, we propose a media-type centric approach to designing RESTful service API. We applied our approach to the Twitter API evolution. The result shows significant improvements in the areas of contract leaking prevention, interface consistency and adding new features.","1530-1362","978-1-4673-4930-7","10.1109/APSEC.2012.24","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6462757","REST;Platform API;Evolvability;Service contract","Media;Contracts;Twitter;Web services;Semantics;Runtime","application program interfaces;formal specification;software architecture;software maintenance;Web services","Web platform API design principle;service contract;Web service;service ecosystem;core service platform;backward compatibility;REST architecture style;evolvability;architecture design;requirement-related contract elements;specification-related elements;service platform design;interface coupling;requirement evolution;problem frame analysis;media-type centric approach;RESTful service API;Twitter API evolution;interface consistency","","","32","","18 Feb 2013","","","IEEE","IEEE Conferences"
"NetDroid: Summarizing Network Behavior of Android Apps for Network Code Maintenance","S. Mostafa; R. Rodriguez; X. Wang","Dept. of Comput. Sci., Univ. of Texas at San Antonio, San Antonio, TX, USA; Dept. of Comput. Sci., Univ. of Texas at San Antonio, San Antonio, TX, USA; Dept. of Comput. Sci., Univ. of Texas at San Antonio, San Antonio, TX, USA","2017 IEEE/ACM 25th International Conference on Program Comprehension (ICPC)","29 Jun 2017","2017","","","165","175","Network access is one of the most common features of Android applications. Statistics show that almost 80% of Android apps ask for network permission and thus may have some network-related features. Android apps may access multiple servers to retrieve or post various types of data, and the code to handle such network features often needs to change as a result of server API evolution or the content change of data transferred. Since various network code is used by multiple features, maintenance of network-related code is often difficult because the code may scatter in different places in the code base, and it may not be easy to predict the impact of a code change to the network behavior of an Android app. In this paper, we present an approach to statically summarize network behavior from the byte code of Android apps. Our approach is based on string taint analysis, and generates a summary of network requests by statically estimating the possible values of network API arguments. To evaluate our technique, we applied our technique to top 500 android apps from the official Google Play market, and the result shows that our approach is able to summarize network behavior for most apps efficiently (averagely less than 50 second for an app). Furthermore, we performed an empirical evaluation on 8 real-world maintenance tasks extracted from bug reports of open-source Android projects on Github. The empirical evaluation shows that our technique is effective in locating relevant network code.","","978-1-5386-0535-6","10.1109/ICPC.2017.3","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7961514","Network Summary;Android Apps;String Analysis","Androids;Humanoid robots;Grammar;Maintenance engineering;Servers;Tools;Smart phones","Android (operating system);application program interfaces;public domain software;software maintenance","NetDroid;network behavior summarization;Android apps;network code maintenance;network access;server API evolution;byte code;string taint analysis;network API arguments;Google Play market;open-source Android projects;Github","","","36","","29 Jun 2017","","","IEEE","IEEE Conferences"
"Mining system specific rules from change patterns","A. Hora; N. Anquetil; S. Ducasse; M. T. Valente","RMoD Team, Inria, Lille, France; RMoD Team, Univ. of Lille / Inria, Lille, France; RMoD Team Inria, Lille, France; Department of Computer Science, UFMG, Belo Horizonte, Brazil","2013 20th Working Conference on Reverse Engineering (WCRE)","21 Nov 2013","2013","","","331","340","A significant percentage of warnings reported by tools to detect coding standard violations are false positives. Thus, there are some works dedicated to provide better rules by mining them from source code history, analyzing bug-fixes or changes between system releases. However, software evolves over time, and during development not only bugs are fixed, but also features are added, and code is refactored. In such cases, changes must be consistently applied in source code to avoid maintenance problems. In this paper, we propose to extract system specific rules by mining systematic changes over source code history, i.e., not just from bug-fixes or system releases, to ensure that changes are consistently applied over source code. We focus on structural changes done to support API modification or evolution with the goal of providing better rules to developers. Also, rules are mined from predefined rule patterns that ensure their quality. In order to assess the precision of such specific rules to detect real violations, we compare them with generic rules provided by tools to detect coding standard violations on four real world systems covering two programming languages. The results show that specific rules are more precise in identifying real violations in source code than generic ones, and thus can complement them.","2375-5369","978-1-4799-2931-3","10.1109/WCRE.2013.6671308","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6671308","","History;Data mining;Standards;Receivers;Encoding;Java;Software","application program interfaces;data mining;program debugging;software maintenance","system specific rule mining;change patterns;source code history mining;bug-fixes analysis;code refactoring;system specific rule extraction;systematic change mining;structural changes;API modification;API evolution;coding standard violation detection","","11","26","","21 Nov 2013","","","IEEE","IEEE Conferences"
"Web API growing pains: Stories from client developers and their code","T. Espinha; A. Zaidman; H. Gross","Delft University of Technology, The Netherlands; Delft University of Technology, The Netherlands; Delft University of Technology, The Netherlands","2014 Software Evolution Week - IEEE Conference on Software Maintenance, Reengineering, and Reverse Engineering (CSMR-WCRE)","27 Feb 2014","2014","","","84","93","Web APIs provide a systematic and extensible approach for application-to-application interaction. Developers using web APIs are forced to accompany the API providers in their software evolution tasks. In order to understand the distress caused by this imposition on web API client developers we perform a semi-structured interview with six such developers. We also investigate how major web API providers organize their API evolution, and we explore how this affects source code changes of their clients. Our exploratory study of the Twitter, Google Maps, Facebook and Netflix web APIs analyzes the state of web API evolution practices and provides insight into the impact of service evolution on client software. Our study is complemented with a set of observations regarding best practices for web API evolution.","","978-1-4799-3752-3","10.1109/CSMR-WCRE.2014.6747228","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6747228","","Google;Facebook;Interviews;Twitter;Libraries;Web services;Context","application program interfaces;social networking (online);software maintenance;source code (software)","Web API;client developers;application-to-application interaction;API providers;software evolution tasks;source code;Twitter;Google Maps;Facebook;Netflix web API","","27","20","","27 Feb 2014","","","IEEE","IEEE Conferences"
"Emerging Trends, Challenges, and Experiences in DevOps and Microservice APIs","U. Zdun; E. Wittern; P. Leitner","Software Architecture, University of Vienna, Vienna, Austria; IBM, Hamburg, Germany; Software Engineering, Chalmers University of Technology","IEEE Software","20 Dec 2019","2020","37","1","87","91","In August 2019, we organized the second Vienna Software Seminar (VSS) with the topic ""DevOps and Microservice APIs.""<sup>1</sup> Embracing the positive reception of its first iteration in 2017,<sup>2</sup> VSS is an opportunity for attendees to discuss recent software technologies, practices, and related research. The seminar's 34 participants included a mix of practitioners and academics, who were invited based on their roles and experiences. The explicit intention of the seminar was to provide ample opportunities for exchange and communication: six themed sessions consisted of one invited keynote and two lightning talks, giving different perspectives on the session?s topic and (ideally) sparking ideas for follow-up discussions. After the talks, all participants decided on subtopics for two to three breakout sessions (i.e., informal, self-organized discussions among interested participants). Breakout session topics included microservice security, tooling for application programming interface (API) evolution, serverless programming models, and identification of microservices using domaindriven design. The sessions provided opportunities for detailed discussions and identifying challenges to address in future collaborations. Toward the end of each session, all participants gathered once more to summarize the breakout discussions. Additional opportunities for communication were provided during shared lunch breaks and social events in the evenings.","1937-4194","","10.1109/MS.2019.2947982","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8938118","","","","","","","18","","20 Dec 2019","","","IEEE","IEEE Magazines"
"Research track: Session XIV — Library and API evolution","",,"2012 28th IEEE International Conference on Software Maintenance (ICSM)","10 Jan 2013","2012","","","367","367","Start of the above-titled section of the conference proceedings record.","1063-6773","978-1-4673-2312-3","10.1109/ICSM.2012.6405294","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6405294","","","","","","","","","10 Jan 2013","","","IEEE","IEEE Conferences"
"Table of contents","",,"2017 IEEE/ACM 1st International Workshop on API Usage and Evolution (WAPI)","3 Jul 2017","2017","","","v","vi","The following topics are dealt with: API specification; API usage; API evolution; and API design.","","978-1-5386-2805-8","10.1109/WAPI.2017.13","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7965478","","","application program interfaces","API specification;API usage;API evolution;API design","","","","","3 Jul 2017","","","IEEE","IEEE Conferences"
"[Front cover]","",,"2012 28th IEEE International Conference on Software Maintenance (ICSM)","10 Jan 2013","2012","","","1","1","The following topics are dealt with: software maintenance; program comprehension; testing; fault localization; OO systems; change impact analysis; build system analysis; traceability; software changes; textual analysis; fault correction; cloning; maintainability; refactoring; library and API evolution; spreadsheet maintenance; bug reporting; bug and warning management; and clustering and modularization.","1063-6773","978-1-4673-2312-3","10.1109/ICSM.2012.6404867","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6404867","","","application program interfaces;fault diagnosis;object-oriented programming;pattern clustering;program debugging;program diagnostics;program testing;software fault tolerance;software libraries;software maintenance","software maintenance;program comprehension;program testing;fault localization;object-oriented systems;change impact analysis;build system analysis;traceability;software changes;textual analysis;fault correction;cloning;maintainability;refactoring;library;API evolution;spreadsheet maintenance;bug reporting;bug management;warning management;clustering;modularization","","","","","10 Jan 2013","","","IEEE","IEEE Conferences"
